// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package orderservice

import(
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TErrorCode int64
const (
  TErrorCode_EGood TErrorCode = 0
  TErrorCode_ENotFound TErrorCode = -1
  TErrorCode_EUnknown TErrorCode = -2
  TErrorCode_EDataExisted TErrorCode = -3
)

func (p TErrorCode) String() string {
  switch p {
  case TErrorCode_EGood: return "EGood"
  case TErrorCode_ENotFound: return "ENotFound"
  case TErrorCode_EUnknown: return "EUnknown"
  case TErrorCode_EDataExisted: return "EDataExisted"
  }
  return "<UNSET>"
}

func TErrorCodeFromString(s string) (TErrorCode, error) {
  switch s {
  case "EGood": return TErrorCode_EGood, nil 
  case "ENotFound": return TErrorCode_ENotFound, nil 
  case "EUnknown": return TErrorCode_EUnknown, nil 
  case "EDataExisted": return TErrorCode_EDataExisted, nil 
  }
  return TErrorCode(0), fmt.Errorf("not a valid TErrorCode string")
}


func TErrorCodePtr(v TErrorCode) *TErrorCode { return &v }

func (p TErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TErrorCode) UnmarshalText(text []byte) error {
q, err := TErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TErrorCode(v)
return nil
}

func (p * TErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TKey int64

func TKeyPtr(v TKey) *TKey { return &v }

type TData *TOrder

func TDataPtr(v TData) *TData { return &v }

// Attributes:
//  - OrderGenID
//  - OrderID
//  - OrderNumber
//  - OrderReference
//  - GroupaddressID
//  - Partner
//  - DeliveryDate
//  - SenderFullname
//  - SenderAddress
//  - SenderPhone
//  - SenderWard
//  - SenderDistrict
//  - SenderProvince
//  - ReceiverAddress
//  - ReceiverPhone
//  - ReceiverWard
//  - ReceiverDistrict
//  - ReceiverProvince
//  - ProductName
//  - ProductPrice
//  - ProductWeight
//  - ProductType
//  - OrderPayment
//  - OrderService
//  - OrderServiceAdd
//  - OrderStatus
//  - OrderPostID
//  - OrderSystemdate
//  - OrderEmployer
//  - OrderNote
//  - MoneyCollection
//  - MoneyTotalfee
//  - MoneyFeecod
//  - MoneyFeevas
//  - MoneyFeeinsurrance
//  - MoneyFee
//  - MoneyFeeother
//  - MoneyTotalvat
//  - MoneyTotal
//  - OrderType
//  - PostCode
//  - ServiceName
//  - ProvinceCode
//  - DistrictName
//  - DistrictCode
//  - WardsCode
//  - IsPending
//  - OrderAction_505
//  - FeeCollected
//  - PostCodeType2
//  - BranchID
//  - BranchIDType2
//  - RegonID
//  - RegonIDType2
type TOrder struct {
  OrderGenID TKey `thrift:"orderGenID,1" db:"orderGenID" json:"orderGenID"`
  OrderID int64 `thrift:"order_id,2" db:"order_id" json:"order_id"`
  OrderNumber string `thrift:"order_number,3" db:"order_number" json:"order_number"`
  OrderReference string `thrift:"order_reference,4" db:"order_reference" json:"order_reference"`
  GroupaddressID int64 `thrift:"groupaddress_id,5" db:"groupaddress_id" json:"groupaddress_id"`
  Partner int32 `thrift:"partner,6" db:"partner" json:"partner"`
  DeliveryDate int64 `thrift:"delivery_date,7" db:"delivery_date" json:"delivery_date"`
  SenderFullname string `thrift:"sender_fullname,8" db:"sender_fullname" json:"sender_fullname"`
  SenderAddress string `thrift:"sender_address,9" db:"sender_address" json:"sender_address"`
  SenderPhone string `thrift:"sender_phone,10" db:"sender_phone" json:"sender_phone"`
  SenderWard int32 `thrift:"sender_ward,11" db:"sender_ward" json:"sender_ward"`
  SenderDistrict int32 `thrift:"sender_district,12" db:"sender_district" json:"sender_district"`
  SenderProvince int32 `thrift:"sender_province,13" db:"sender_province" json:"sender_province"`
  ReceiverAddress string `thrift:"receiver_address,14" db:"receiver_address" json:"receiver_address"`
  ReceiverPhone string `thrift:"receiver_phone,15" db:"receiver_phone" json:"receiver_phone"`
  ReceiverWard int32 `thrift:"receiver_ward,16" db:"receiver_ward" json:"receiver_ward"`
  ReceiverDistrict int32 `thrift:"receiver_district,17" db:"receiver_district" json:"receiver_district"`
  ReceiverProvince int32 `thrift:"receiver_province,18" db:"receiver_province" json:"receiver_province"`
  ProductName string `thrift:"product_name,19" db:"product_name" json:"product_name"`
  ProductPrice int32 `thrift:"product_price,20" db:"product_price" json:"product_price"`
  ProductWeight int32 `thrift:"product_weight,21" db:"product_weight" json:"product_weight"`
  ProductType string `thrift:"product_type,22" db:"product_type" json:"product_type"`
  OrderPayment int32 `thrift:"order_payment,23" db:"order_payment" json:"order_payment"`
  OrderService string `thrift:"order_service,24" db:"order_service" json:"order_service"`
  OrderServiceAdd string `thrift:"order_service_add,25" db:"order_service_add" json:"order_service_add"`
  OrderStatus int32 `thrift:"order_status,26" db:"order_status" json:"order_status"`
  OrderPostID int32 `thrift:"order_post_id,27" db:"order_post_id" json:"order_post_id"`
  OrderSystemdate int64 `thrift:"order_systemdate,28" db:"order_systemdate" json:"order_systemdate"`
  OrderEmployer int32 `thrift:"order_employer,29" db:"order_employer" json:"order_employer"`
  OrderNote string `thrift:"order_note,30" db:"order_note" json:"order_note"`
  MoneyCollection int64 `thrift:"money_collection,31" db:"money_collection" json:"money_collection"`
  MoneyTotalfee int64 `thrift:"money_totalfee,32" db:"money_totalfee" json:"money_totalfee"`
  MoneyFeecod int64 `thrift:"money_feecod,33" db:"money_feecod" json:"money_feecod"`
  MoneyFeevas int64 `thrift:"money_feevas,34" db:"money_feevas" json:"money_feevas"`
  MoneyFeeinsurrance int64 `thrift:"money_feeinsurrance,35" db:"money_feeinsurrance" json:"money_feeinsurrance"`
  // unused fields # 36 to 38
  MoneyFee int64 `thrift:"money_fee,39" db:"money_fee" json:"money_fee"`
  MoneyFeeother int64 `thrift:"money_feeother,40" db:"money_feeother" json:"money_feeother"`
  MoneyTotalvat int64 `thrift:"money_totalvat,41" db:"money_totalvat" json:"money_totalvat"`
  MoneyTotal int64 `thrift:"money_total,42" db:"money_total" json:"money_total"`
  OrderType int64 `thrift:"order_type,43" db:"order_type" json:"order_type"`
  PostCode string `thrift:"post_code,44" db:"post_code" json:"post_code"`
  ServiceName string `thrift:"service_name,45" db:"service_name" json:"service_name"`
  ProvinceCode string `thrift:"province_code,46" db:"province_code" json:"province_code"`
  DistrictName string `thrift:"district_name,47" db:"district_name" json:"district_name"`
  DistrictCode string `thrift:"district_code,48" db:"district_code" json:"district_code"`
  WardsCode string `thrift:"wards_code,49" db:"wards_code" json:"wards_code"`
  IsPending int32 `thrift:"is_pending,50" db:"is_pending" json:"is_pending"`
  OrderAction_505 int32 `thrift:"order_action_505,51" db:"order_action_505" json:"order_action_505"`
  FeeCollected int32 `thrift:"fee_collected,52" db:"fee_collected" json:"fee_collected"`
  PostCodeType2 string `thrift:"post_code_type2,53" db:"post_code_type2" json:"post_code_type2"`
  BranchID string `thrift:"branch_id,54" db:"branch_id" json:"branch_id"`
  BranchIDType2 string `thrift:"branch_id_type2,55" db:"branch_id_type2" json:"branch_id_type2"`
  RegonID string `thrift:"regon_id,56" db:"regon_id" json:"regon_id"`
  RegonIDType2 string `thrift:"regon_id_type2,57" db:"regon_id_type2" json:"regon_id_type2"`
}

func NewTOrder() *TOrder {
  return &TOrder{}
}


func (p *TOrder) GetOrderGenID() TKey {
  return p.OrderGenID
}

func (p *TOrder) GetOrderID() int64 {
  return p.OrderID
}

func (p *TOrder) GetOrderNumber() string {
  return p.OrderNumber
}

func (p *TOrder) GetOrderReference() string {
  return p.OrderReference
}

func (p *TOrder) GetGroupaddressID() int64 {
  return p.GroupaddressID
}

func (p *TOrder) GetPartner() int32 {
  return p.Partner
}

func (p *TOrder) GetDeliveryDate() int64 {
  return p.DeliveryDate
}

func (p *TOrder) GetSenderFullname() string {
  return p.SenderFullname
}

func (p *TOrder) GetSenderAddress() string {
  return p.SenderAddress
}

func (p *TOrder) GetSenderPhone() string {
  return p.SenderPhone
}

func (p *TOrder) GetSenderWard() int32 {
  return p.SenderWard
}

func (p *TOrder) GetSenderDistrict() int32 {
  return p.SenderDistrict
}

func (p *TOrder) GetSenderProvince() int32 {
  return p.SenderProvince
}

func (p *TOrder) GetReceiverAddress() string {
  return p.ReceiverAddress
}

func (p *TOrder) GetReceiverPhone() string {
  return p.ReceiverPhone
}

func (p *TOrder) GetReceiverWard() int32 {
  return p.ReceiverWard
}

func (p *TOrder) GetReceiverDistrict() int32 {
  return p.ReceiverDistrict
}

func (p *TOrder) GetReceiverProvince() int32 {
  return p.ReceiverProvince
}

func (p *TOrder) GetProductName() string {
  return p.ProductName
}

func (p *TOrder) GetProductPrice() int32 {
  return p.ProductPrice
}

func (p *TOrder) GetProductWeight() int32 {
  return p.ProductWeight
}

func (p *TOrder) GetProductType() string {
  return p.ProductType
}

func (p *TOrder) GetOrderPayment() int32 {
  return p.OrderPayment
}

func (p *TOrder) GetOrderService() string {
  return p.OrderService
}

func (p *TOrder) GetOrderServiceAdd() string {
  return p.OrderServiceAdd
}

func (p *TOrder) GetOrderStatus() int32 {
  return p.OrderStatus
}

func (p *TOrder) GetOrderPostID() int32 {
  return p.OrderPostID
}

func (p *TOrder) GetOrderSystemdate() int64 {
  return p.OrderSystemdate
}

func (p *TOrder) GetOrderEmployer() int32 {
  return p.OrderEmployer
}

func (p *TOrder) GetOrderNote() string {
  return p.OrderNote
}

func (p *TOrder) GetMoneyCollection() int64 {
  return p.MoneyCollection
}

func (p *TOrder) GetMoneyTotalfee() int64 {
  return p.MoneyTotalfee
}

func (p *TOrder) GetMoneyFeecod() int64 {
  return p.MoneyFeecod
}

func (p *TOrder) GetMoneyFeevas() int64 {
  return p.MoneyFeevas
}

func (p *TOrder) GetMoneyFeeinsurrance() int64 {
  return p.MoneyFeeinsurrance
}

func (p *TOrder) GetMoneyFee() int64 {
  return p.MoneyFee
}

func (p *TOrder) GetMoneyFeeother() int64 {
  return p.MoneyFeeother
}

func (p *TOrder) GetMoneyTotalvat() int64 {
  return p.MoneyTotalvat
}

func (p *TOrder) GetMoneyTotal() int64 {
  return p.MoneyTotal
}

func (p *TOrder) GetOrderType() int64 {
  return p.OrderType
}

func (p *TOrder) GetPostCode() string {
  return p.PostCode
}

func (p *TOrder) GetServiceName() string {
  return p.ServiceName
}

func (p *TOrder) GetProvinceCode() string {
  return p.ProvinceCode
}

func (p *TOrder) GetDistrictName() string {
  return p.DistrictName
}

func (p *TOrder) GetDistrictCode() string {
  return p.DistrictCode
}

func (p *TOrder) GetWardsCode() string {
  return p.WardsCode
}

func (p *TOrder) GetIsPending() int32 {
  return p.IsPending
}

func (p *TOrder) GetOrderAction_505() int32 {
  return p.OrderAction_505
}

func (p *TOrder) GetFeeCollected() int32 {
  return p.FeeCollected
}

func (p *TOrder) GetPostCodeType2() string {
  return p.PostCodeType2
}

func (p *TOrder) GetBranchID() string {
  return p.BranchID
}

func (p *TOrder) GetBranchIDType2() string {
  return p.BranchIDType2
}

func (p *TOrder) GetRegonID() string {
  return p.RegonID
}

func (p *TOrder) GetRegonIDType2() string {
  return p.RegonIDType2
}
func (p *TOrder) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField25(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField26(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField27(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField28(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField29(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField30(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField31(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField32(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField33(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField34(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 35:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField35(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 39:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField39(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField40(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 41:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField41(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 42:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField42(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 43:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField43(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 44:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField44(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 45:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField45(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 46:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField46(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 47:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField47(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 48:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField48(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 49:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField49(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 50:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField50(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 51:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField51(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 52:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField52(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 53:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField53(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 54:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField54(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 55:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField55(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 56:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField56(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 57:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField57(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TOrder)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.OrderGenID = temp
}
  return nil
}

func (p *TOrder)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OrderID = v
}
  return nil
}

func (p *TOrder)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OrderNumber = v
}
  return nil
}

func (p *TOrder)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OrderReference = v
}
  return nil
}

func (p *TOrder)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.GroupaddressID = v
}
  return nil
}

func (p *TOrder)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Partner = v
}
  return nil
}

func (p *TOrder)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.DeliveryDate = v
}
  return nil
}

func (p *TOrder)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.SenderFullname = v
}
  return nil
}

func (p *TOrder)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.SenderAddress = v
}
  return nil
}

func (p *TOrder)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.SenderPhone = v
}
  return nil
}

func (p *TOrder)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.SenderWard = v
}
  return nil
}

func (p *TOrder)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.SenderDistrict = v
}
  return nil
}

func (p *TOrder)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.SenderProvince = v
}
  return nil
}

func (p *TOrder)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.ReceiverAddress = v
}
  return nil
}

func (p *TOrder)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.ReceiverPhone = v
}
  return nil
}

func (p *TOrder)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.ReceiverWard = v
}
  return nil
}

func (p *TOrder)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.ReceiverDistrict = v
}
  return nil
}

func (p *TOrder)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.ReceiverProvince = v
}
  return nil
}

func (p *TOrder)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.ProductName = v
}
  return nil
}

func (p *TOrder)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.ProductPrice = v
}
  return nil
}

func (p *TOrder)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.ProductWeight = v
}
  return nil
}

func (p *TOrder)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.ProductType = v
}
  return nil
}

func (p *TOrder)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.OrderPayment = v
}
  return nil
}

func (p *TOrder)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.OrderService = v
}
  return nil
}

func (p *TOrder)  ReadField25(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.OrderServiceAdd = v
}
  return nil
}

func (p *TOrder)  ReadField26(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.OrderStatus = v
}
  return nil
}

func (p *TOrder)  ReadField27(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.OrderPostID = v
}
  return nil
}

func (p *TOrder)  ReadField28(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.OrderSystemdate = v
}
  return nil
}

func (p *TOrder)  ReadField29(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  p.OrderEmployer = v
}
  return nil
}

func (p *TOrder)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.OrderNote = v
}
  return nil
}

func (p *TOrder)  ReadField31(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.MoneyCollection = v
}
  return nil
}

func (p *TOrder)  ReadField32(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.MoneyTotalfee = v
}
  return nil
}

func (p *TOrder)  ReadField33(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.MoneyFeecod = v
}
  return nil
}

func (p *TOrder)  ReadField34(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.MoneyFeevas = v
}
  return nil
}

func (p *TOrder)  ReadField35(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 35: ", err)
} else {
  p.MoneyFeeinsurrance = v
}
  return nil
}

func (p *TOrder)  ReadField39(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 39: ", err)
} else {
  p.MoneyFee = v
}
  return nil
}

func (p *TOrder)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.MoneyFeeother = v
}
  return nil
}

func (p *TOrder)  ReadField41(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 41: ", err)
} else {
  p.MoneyTotalvat = v
}
  return nil
}

func (p *TOrder)  ReadField42(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 42: ", err)
} else {
  p.MoneyTotal = v
}
  return nil
}

func (p *TOrder)  ReadField43(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 43: ", err)
} else {
  p.OrderType = v
}
  return nil
}

func (p *TOrder)  ReadField44(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 44: ", err)
} else {
  p.PostCode = v
}
  return nil
}

func (p *TOrder)  ReadField45(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 45: ", err)
} else {
  p.ServiceName = v
}
  return nil
}

func (p *TOrder)  ReadField46(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 46: ", err)
} else {
  p.ProvinceCode = v
}
  return nil
}

func (p *TOrder)  ReadField47(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 47: ", err)
} else {
  p.DistrictName = v
}
  return nil
}

func (p *TOrder)  ReadField48(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 48: ", err)
} else {
  p.DistrictCode = v
}
  return nil
}

func (p *TOrder)  ReadField49(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 49: ", err)
} else {
  p.WardsCode = v
}
  return nil
}

func (p *TOrder)  ReadField50(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.IsPending = v
}
  return nil
}

func (p *TOrder)  ReadField51(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 51: ", err)
} else {
  p.OrderAction_505 = v
}
  return nil
}

func (p *TOrder)  ReadField52(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 52: ", err)
} else {
  p.FeeCollected = v
}
  return nil
}

func (p *TOrder)  ReadField53(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 53: ", err)
} else {
  p.PostCodeType2 = v
}
  return nil
}

func (p *TOrder)  ReadField54(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 54: ", err)
} else {
  p.BranchID = v
}
  return nil
}

func (p *TOrder)  ReadField55(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 55: ", err)
} else {
  p.BranchIDType2 = v
}
  return nil
}

func (p *TOrder)  ReadField56(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 56: ", err)
} else {
  p.RegonID = v
}
  return nil
}

func (p *TOrder)  ReadField57(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 57: ", err)
} else {
  p.RegonIDType2 = v
}
  return nil
}

func (p *TOrder) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TOrder"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
    if err := p.writeField26(oprot); err != nil { return err }
    if err := p.writeField27(oprot); err != nil { return err }
    if err := p.writeField28(oprot); err != nil { return err }
    if err := p.writeField29(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField31(oprot); err != nil { return err }
    if err := p.writeField32(oprot); err != nil { return err }
    if err := p.writeField33(oprot); err != nil { return err }
    if err := p.writeField34(oprot); err != nil { return err }
    if err := p.writeField35(oprot); err != nil { return err }
    if err := p.writeField39(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField41(oprot); err != nil { return err }
    if err := p.writeField42(oprot); err != nil { return err }
    if err := p.writeField43(oprot); err != nil { return err }
    if err := p.writeField44(oprot); err != nil { return err }
    if err := p.writeField45(oprot); err != nil { return err }
    if err := p.writeField46(oprot); err != nil { return err }
    if err := p.writeField47(oprot); err != nil { return err }
    if err := p.writeField48(oprot); err != nil { return err }
    if err := p.writeField49(oprot); err != nil { return err }
    if err := p.writeField50(oprot); err != nil { return err }
    if err := p.writeField51(oprot); err != nil { return err }
    if err := p.writeField52(oprot); err != nil { return err }
    if err := p.writeField53(oprot); err != nil { return err }
    if err := p.writeField54(oprot); err != nil { return err }
    if err := p.writeField55(oprot); err != nil { return err }
    if err := p.writeField56(oprot); err != nil { return err }
    if err := p.writeField57(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TOrder) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("orderGenID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:orderGenID: ", p), err) }
  if err := oprot.WriteI64(int64(p.OrderGenID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orderGenID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:orderGenID: ", p), err) }
  return err
}

func (p *TOrder) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:order_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.OrderID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:order_id: ", p), err) }
  return err
}

func (p *TOrder) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_number", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:order_number: ", p), err) }
  if err := oprot.WriteString(string(p.OrderNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_number (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:order_number: ", p), err) }
  return err
}

func (p *TOrder) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_reference", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:order_reference: ", p), err) }
  if err := oprot.WriteString(string(p.OrderReference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_reference (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:order_reference: ", p), err) }
  return err
}

func (p *TOrder) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupaddress_id", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:groupaddress_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.GroupaddressID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupaddress_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:groupaddress_id: ", p), err) }
  return err
}

func (p *TOrder) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("partner", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:partner: ", p), err) }
  if err := oprot.WriteI32(int32(p.Partner)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partner (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:partner: ", p), err) }
  return err
}

func (p *TOrder) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("delivery_date", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:delivery_date: ", p), err) }
  if err := oprot.WriteI64(int64(p.DeliveryDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.delivery_date (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:delivery_date: ", p), err) }
  return err
}

func (p *TOrder) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sender_fullname", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:sender_fullname: ", p), err) }
  if err := oprot.WriteString(string(p.SenderFullname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sender_fullname (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:sender_fullname: ", p), err) }
  return err
}

func (p *TOrder) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sender_address", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:sender_address: ", p), err) }
  if err := oprot.WriteString(string(p.SenderAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sender_address (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:sender_address: ", p), err) }
  return err
}

func (p *TOrder) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sender_phone", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:sender_phone: ", p), err) }
  if err := oprot.WriteString(string(p.SenderPhone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sender_phone (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:sender_phone: ", p), err) }
  return err
}

func (p *TOrder) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sender_ward", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:sender_ward: ", p), err) }
  if err := oprot.WriteI32(int32(p.SenderWard)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sender_ward (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:sender_ward: ", p), err) }
  return err
}

func (p *TOrder) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sender_district", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:sender_district: ", p), err) }
  if err := oprot.WriteI32(int32(p.SenderDistrict)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sender_district (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:sender_district: ", p), err) }
  return err
}

func (p *TOrder) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sender_province", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:sender_province: ", p), err) }
  if err := oprot.WriteI32(int32(p.SenderProvince)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sender_province (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:sender_province: ", p), err) }
  return err
}

func (p *TOrder) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("receiver_address", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:receiver_address: ", p), err) }
  if err := oprot.WriteString(string(p.ReceiverAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.receiver_address (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:receiver_address: ", p), err) }
  return err
}

func (p *TOrder) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("receiver_phone", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:receiver_phone: ", p), err) }
  if err := oprot.WriteString(string(p.ReceiverPhone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.receiver_phone (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:receiver_phone: ", p), err) }
  return err
}

func (p *TOrder) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("receiver_ward", thrift.I32, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:receiver_ward: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReceiverWard)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.receiver_ward (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:receiver_ward: ", p), err) }
  return err
}

func (p *TOrder) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("receiver_district", thrift.I32, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:receiver_district: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReceiverDistrict)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.receiver_district (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:receiver_district: ", p), err) }
  return err
}

func (p *TOrder) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("receiver_province", thrift.I32, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:receiver_province: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReceiverProvince)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.receiver_province (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:receiver_province: ", p), err) }
  return err
}

func (p *TOrder) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("product_name", thrift.STRING, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:product_name: ", p), err) }
  if err := oprot.WriteString(string(p.ProductName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.product_name (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:product_name: ", p), err) }
  return err
}

func (p *TOrder) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("product_price", thrift.I32, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:product_price: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProductPrice)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.product_price (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:product_price: ", p), err) }
  return err
}

func (p *TOrder) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("product_weight", thrift.I32, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:product_weight: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProductWeight)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.product_weight (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:product_weight: ", p), err) }
  return err
}

func (p *TOrder) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("product_type", thrift.STRING, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:product_type: ", p), err) }
  if err := oprot.WriteString(string(p.ProductType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.product_type (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:product_type: ", p), err) }
  return err
}

func (p *TOrder) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_payment", thrift.I32, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:order_payment: ", p), err) }
  if err := oprot.WriteI32(int32(p.OrderPayment)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_payment (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:order_payment: ", p), err) }
  return err
}

func (p *TOrder) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_service", thrift.STRING, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:order_service: ", p), err) }
  if err := oprot.WriteString(string(p.OrderService)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_service (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:order_service: ", p), err) }
  return err
}

func (p *TOrder) writeField25(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_service_add", thrift.STRING, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:order_service_add: ", p), err) }
  if err := oprot.WriteString(string(p.OrderServiceAdd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_service_add (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:order_service_add: ", p), err) }
  return err
}

func (p *TOrder) writeField26(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_status", thrift.I32, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:order_status: ", p), err) }
  if err := oprot.WriteI32(int32(p.OrderStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_status (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:order_status: ", p), err) }
  return err
}

func (p *TOrder) writeField27(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_post_id", thrift.I32, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:order_post_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.OrderPostID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_post_id (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:order_post_id: ", p), err) }
  return err
}

func (p *TOrder) writeField28(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_systemdate", thrift.I64, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:order_systemdate: ", p), err) }
  if err := oprot.WriteI64(int64(p.OrderSystemdate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_systemdate (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:order_systemdate: ", p), err) }
  return err
}

func (p *TOrder) writeField29(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_employer", thrift.I32, 29); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:order_employer: ", p), err) }
  if err := oprot.WriteI32(int32(p.OrderEmployer)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_employer (29) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 29:order_employer: ", p), err) }
  return err
}

func (p *TOrder) writeField30(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_note", thrift.STRING, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:order_note: ", p), err) }
  if err := oprot.WriteString(string(p.OrderNote)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_note (30) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:order_note: ", p), err) }
  return err
}

func (p *TOrder) writeField31(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("money_collection", thrift.I64, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:money_collection: ", p), err) }
  if err := oprot.WriteI64(int64(p.MoneyCollection)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.money_collection (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:money_collection: ", p), err) }
  return err
}

func (p *TOrder) writeField32(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("money_totalfee", thrift.I64, 32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:money_totalfee: ", p), err) }
  if err := oprot.WriteI64(int64(p.MoneyTotalfee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.money_totalfee (32) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 32:money_totalfee: ", p), err) }
  return err
}

func (p *TOrder) writeField33(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("money_feecod", thrift.I64, 33); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:money_feecod: ", p), err) }
  if err := oprot.WriteI64(int64(p.MoneyFeecod)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.money_feecod (33) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 33:money_feecod: ", p), err) }
  return err
}

func (p *TOrder) writeField34(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("money_feevas", thrift.I64, 34); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:money_feevas: ", p), err) }
  if err := oprot.WriteI64(int64(p.MoneyFeevas)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.money_feevas (34) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 34:money_feevas: ", p), err) }
  return err
}

func (p *TOrder) writeField35(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("money_feeinsurrance", thrift.I64, 35); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:money_feeinsurrance: ", p), err) }
  if err := oprot.WriteI64(int64(p.MoneyFeeinsurrance)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.money_feeinsurrance (35) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 35:money_feeinsurrance: ", p), err) }
  return err
}

func (p *TOrder) writeField39(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("money_fee", thrift.I64, 39); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:money_fee: ", p), err) }
  if err := oprot.WriteI64(int64(p.MoneyFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.money_fee (39) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 39:money_fee: ", p), err) }
  return err
}

func (p *TOrder) writeField40(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("money_feeother", thrift.I64, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:money_feeother: ", p), err) }
  if err := oprot.WriteI64(int64(p.MoneyFeeother)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.money_feeother (40) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:money_feeother: ", p), err) }
  return err
}

func (p *TOrder) writeField41(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("money_totalvat", thrift.I64, 41); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:money_totalvat: ", p), err) }
  if err := oprot.WriteI64(int64(p.MoneyTotalvat)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.money_totalvat (41) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 41:money_totalvat: ", p), err) }
  return err
}

func (p *TOrder) writeField42(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("money_total", thrift.I64, 42); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:money_total: ", p), err) }
  if err := oprot.WriteI64(int64(p.MoneyTotal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.money_total (42) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 42:money_total: ", p), err) }
  return err
}

func (p *TOrder) writeField43(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_type", thrift.I64, 43); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:order_type: ", p), err) }
  if err := oprot.WriteI64(int64(p.OrderType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_type (43) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 43:order_type: ", p), err) }
  return err
}

func (p *TOrder) writeField44(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("post_code", thrift.STRING, 44); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 44:post_code: ", p), err) }
  if err := oprot.WriteString(string(p.PostCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.post_code (44) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 44:post_code: ", p), err) }
  return err
}

func (p *TOrder) writeField45(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("service_name", thrift.STRING, 45); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 45:service_name: ", p), err) }
  if err := oprot.WriteString(string(p.ServiceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.service_name (45) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 45:service_name: ", p), err) }
  return err
}

func (p *TOrder) writeField46(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("province_code", thrift.STRING, 46); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 46:province_code: ", p), err) }
  if err := oprot.WriteString(string(p.ProvinceCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.province_code (46) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 46:province_code: ", p), err) }
  return err
}

func (p *TOrder) writeField47(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("district_name", thrift.STRING, 47); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 47:district_name: ", p), err) }
  if err := oprot.WriteString(string(p.DistrictName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.district_name (47) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 47:district_name: ", p), err) }
  return err
}

func (p *TOrder) writeField48(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("district_code", thrift.STRING, 48); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 48:district_code: ", p), err) }
  if err := oprot.WriteString(string(p.DistrictCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.district_code (48) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 48:district_code: ", p), err) }
  return err
}

func (p *TOrder) writeField49(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("wards_code", thrift.STRING, 49); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 49:wards_code: ", p), err) }
  if err := oprot.WriteString(string(p.WardsCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.wards_code (49) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 49:wards_code: ", p), err) }
  return err
}

func (p *TOrder) writeField50(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_pending", thrift.I32, 50); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:is_pending: ", p), err) }
  if err := oprot.WriteI32(int32(p.IsPending)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_pending (50) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 50:is_pending: ", p), err) }
  return err
}

func (p *TOrder) writeField51(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_action_505", thrift.I32, 51); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 51:order_action_505: ", p), err) }
  if err := oprot.WriteI32(int32(p.OrderAction_505)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_action_505 (51) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 51:order_action_505: ", p), err) }
  return err
}

func (p *TOrder) writeField52(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fee_collected", thrift.I32, 52); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 52:fee_collected: ", p), err) }
  if err := oprot.WriteI32(int32(p.FeeCollected)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fee_collected (52) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 52:fee_collected: ", p), err) }
  return err
}

func (p *TOrder) writeField53(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("post_code_type2", thrift.STRING, 53); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 53:post_code_type2: ", p), err) }
  if err := oprot.WriteString(string(p.PostCodeType2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.post_code_type2 (53) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 53:post_code_type2: ", p), err) }
  return err
}

func (p *TOrder) writeField54(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("branch_id", thrift.STRING, 54); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 54:branch_id: ", p), err) }
  if err := oprot.WriteString(string(p.BranchID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.branch_id (54) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 54:branch_id: ", p), err) }
  return err
}

func (p *TOrder) writeField55(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("branch_id_type2", thrift.STRING, 55); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 55:branch_id_type2: ", p), err) }
  if err := oprot.WriteString(string(p.BranchIDType2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.branch_id_type2 (55) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 55:branch_id_type2: ", p), err) }
  return err
}

func (p *TOrder) writeField56(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("regon_id", thrift.STRING, 56); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 56:regon_id: ", p), err) }
  if err := oprot.WriteString(string(p.RegonID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.regon_id (56) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 56:regon_id: ", p), err) }
  return err
}

func (p *TOrder) writeField57(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("regon_id_type2", thrift.STRING, 57); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 57:regon_id_type2: ", p), err) }
  if err := oprot.WriteString(string(p.RegonIDType2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.regon_id_type2 (57) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 57:regon_id_type2: ", p), err) }
  return err
}

func (p *TOrder) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TOrder(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - Data
type TDataResult_ struct {
  ErrorCode TErrorCode `thrift:"errorCode,1" db:"errorCode" json:"errorCode"`
  Data *TOrder `thrift:"data,2" db:"data" json:"data,omitempty"`
}

func NewTDataResult_() *TDataResult_ {
  return &TDataResult_{}
}


func (p *TDataResult_) GetErrorCode() TErrorCode {
  return p.ErrorCode
}
var TDataResult__Data_DEFAULT *TOrder
func (p *TDataResult_) GetData() *TOrder {
  if !p.IsSetData() {
    return TDataResult__Data_DEFAULT
  }
return p.Data
}
func (p *TDataResult_) IsSetData() bool {
  return p.Data != nil
}

func (p *TDataResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *TDataResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.Data = &TOrder{}
  if err := p.Data.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *TDataResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDataResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err) }
  return err
}

func (p *TDataResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
    if err := p.Data.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  }
  return err
}

func (p *TDataResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataResult_(%+v)", *p)
}

type TDataServiceR interface {
  // Parameters:
  //  - Key
  GetData(ctx context.Context, key TKey) (r *TDataResult_, err error)
}

type TDataServiceRClient struct {
  c thrift.TClient
}

func NewTDataServiceRClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TDataServiceRClient {
  return &TDataServiceRClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTDataServiceRClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TDataServiceRClient {
  return &TDataServiceRClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTDataServiceRClient(c thrift.TClient) *TDataServiceRClient {
  return &TDataServiceRClient{
    c: c,
  }
}

func (p *TDataServiceRClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Key
func (p *TDataServiceRClient) GetData(ctx context.Context, key TKey) (r *TDataResult_, err error) {
  var _args0 TDataServiceRGetDataArgs
  _args0.Key = key
  var _result1 TDataServiceRGetDataResult
  if err = p.Client_().Call(ctx, "getData", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

type TDataServiceRProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TDataServiceR
}

func (p *TDataServiceRProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TDataServiceRProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TDataServiceRProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTDataServiceRProcessor(handler TDataServiceR) *TDataServiceRProcessor {

  self2 := &TDataServiceRProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self2.processorMap["getData"] = &tDataServiceRProcessorGetData{handler:handler}
return self2
}

func (p *TDataServiceRProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x3.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x3

}

type tDataServiceRProcessorGetData struct {
  handler TDataServiceR
}

func (p *tDataServiceRProcessorGetData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDataServiceRGetDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDataServiceRGetDataResult{}
var retval *TDataResult_
  var err2 error
  if retval, err2 = p.handler.GetData(ctx, args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getData: " + err2.Error())
    oprot.WriteMessageBegin("getData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Key
type TDataServiceRGetDataArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
}

func NewTDataServiceRGetDataArgs() *TDataServiceRGetDataArgs {
  return &TDataServiceRGetDataArgs{}
}


func (p *TDataServiceRGetDataArgs) GetKey() TKey {
  return p.Key
}
func (p *TDataServiceRGetDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceRGetDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *TDataServiceRGetDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceRGetDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI64(int64(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TDataServiceRGetDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceRGetDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDataServiceRGetDataResult struct {
  Success *TDataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDataServiceRGetDataResult() *TDataServiceRGetDataResult {
  return &TDataServiceRGetDataResult{}
}

var TDataServiceRGetDataResult_Success_DEFAULT *TDataResult_
func (p *TDataServiceRGetDataResult) GetSuccess() *TDataResult_ {
  if !p.IsSetSuccess() {
    return TDataServiceRGetDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *TDataServiceRGetDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDataServiceRGetDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceRGetDataResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDataResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TDataServiceRGetDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceRGetDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDataServiceRGetDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceRGetDataResult(%+v)", *p)
}


type TDataService interface {
  // Parameters:
  //  - Key
  GetData(ctx context.Context, key TKey) (r *TDataResult_, err error)
  // Parameters:
  //  - Key
  //  - Data
  PutData(ctx context.Context, key TKey, data *TOrder) (r TErrorCode, err error)
}

type TDataServiceClient struct {
  c thrift.TClient
}

func NewTDataServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TDataServiceClient {
  return &TDataServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTDataServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TDataServiceClient {
  return &TDataServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTDataServiceClient(c thrift.TClient) *TDataServiceClient {
  return &TDataServiceClient{
    c: c,
  }
}

func (p *TDataServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Key
func (p *TDataServiceClient) GetData(ctx context.Context, key TKey) (r *TDataResult_, err error) {
  var _args5 TDataServiceGetDataArgs
  _args5.Key = key
  var _result6 TDataServiceGetDataResult
  if err = p.Client_().Call(ctx, "getData", &_args5, &_result6); err != nil {
    return
  }
  return _result6.GetSuccess(), nil
}

// Parameters:
//  - Key
//  - Data
func (p *TDataServiceClient) PutData(ctx context.Context, key TKey, data *TOrder) (r TErrorCode, err error) {
  var _args7 TDataServicePutDataArgs
  _args7.Key = key
  _args7.Data = data
  var _result8 TDataServicePutDataResult
  if err = p.Client_().Call(ctx, "putData", &_args7, &_result8); err != nil {
    return
  }
  return _result8.GetSuccess(), nil
}

type TDataServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TDataService
}

func (p *TDataServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TDataServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TDataServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTDataServiceProcessor(handler TDataService) *TDataServiceProcessor {

  self9 := &TDataServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self9.processorMap["getData"] = &tDataServiceProcessorGetData{handler:handler}
  self9.processorMap["putData"] = &tDataServiceProcessorPutData{handler:handler}
return self9
}

func (p *TDataServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x10 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x10.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x10

}

type tDataServiceProcessorGetData struct {
  handler TDataService
}

func (p *tDataServiceProcessorGetData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDataServiceGetDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDataServiceGetDataResult{}
var retval *TDataResult_
  var err2 error
  if retval, err2 = p.handler.GetData(ctx, args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getData: " + err2.Error())
    oprot.WriteMessageBegin("getData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDataServiceProcessorPutData struct {
  handler TDataService
}

func (p *tDataServiceProcessorPutData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDataServicePutDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("putData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDataServicePutDataResult{}
var retval TErrorCode
  var err2 error
  if retval, err2 = p.handler.PutData(ctx, args.Key, args.Data); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putData: " + err2.Error())
    oprot.WriteMessageBegin("putData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("putData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Key
type TDataServiceGetDataArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
}

func NewTDataServiceGetDataArgs() *TDataServiceGetDataArgs {
  return &TDataServiceGetDataArgs{}
}


func (p *TDataServiceGetDataArgs) GetKey() TKey {
  return p.Key
}
func (p *TDataServiceGetDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceGetDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *TDataServiceGetDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceGetDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI64(int64(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TDataServiceGetDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceGetDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDataServiceGetDataResult struct {
  Success *TDataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDataServiceGetDataResult() *TDataServiceGetDataResult {
  return &TDataServiceGetDataResult{}
}

var TDataServiceGetDataResult_Success_DEFAULT *TDataResult_
func (p *TDataServiceGetDataResult) GetSuccess() *TDataResult_ {
  if !p.IsSetSuccess() {
    return TDataServiceGetDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *TDataServiceGetDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDataServiceGetDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceGetDataResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDataResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TDataServiceGetDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceGetDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDataServiceGetDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceGetDataResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Data
type TDataServicePutDataArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
  Data *TOrder `thrift:"data,2" db:"data" json:"data"`
}

func NewTDataServicePutDataArgs() *TDataServicePutDataArgs {
  return &TDataServicePutDataArgs{}
}


func (p *TDataServicePutDataArgs) GetKey() TKey {
  return p.Key
}
var TDataServicePutDataArgs_Data_DEFAULT *TOrder
func (p *TDataServicePutDataArgs) GetData() *TOrder {
  if !p.IsSetData() {
    return TDataServicePutDataArgs_Data_DEFAULT
  }
return p.Data
}
func (p *TDataServicePutDataArgs) IsSetData() bool {
  return p.Data != nil
}

func (p *TDataServicePutDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServicePutDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *TDataServicePutDataArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Data = &TOrder{}
  if err := p.Data.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *TDataServicePutDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServicePutDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI64(int64(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TDataServicePutDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := p.Data.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *TDataServicePutDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServicePutDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDataServicePutDataResult struct {
  Success *TErrorCode `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDataServicePutDataResult() *TDataServicePutDataResult {
  return &TDataServicePutDataResult{}
}

var TDataServicePutDataResult_Success_DEFAULT TErrorCode
func (p *TDataServicePutDataResult) GetSuccess() TErrorCode {
  if !p.IsSetSuccess() {
    return TDataServicePutDataResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TDataServicePutDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDataServicePutDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServicePutDataResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := TErrorCode(v)
  p.Success = &temp
}
  return nil
}

func (p *TDataServicePutDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServicePutDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDataServicePutDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServicePutDataResult(%+v)", *p)
}


type TOrderService interface {
TDataService
}

type TOrderServiceClient struct {
  *TDataServiceClient
}

func NewTOrderServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TOrderServiceClient {
  return &TOrderServiceClient{TDataServiceClient: NewTDataServiceClientFactory(t, f)}}

func NewTOrderServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TOrderServiceClient {
  return &TOrderServiceClient{TDataServiceClient: NewTDataServiceClientProtocol(t, iprot, oprot)}
}

func NewTOrderServiceClient(c thrift.TClient) *TOrderServiceClient {
  return &TOrderServiceClient{
    TDataServiceClient: NewTDataServiceClient(c),
  }
}

type TOrderServiceProcessor struct {
  *TDataServiceProcessor
}

func NewTOrderServiceProcessor(handler TOrderService) *TOrderServiceProcessor {
  self19 := &TOrderServiceProcessor{NewTDataServiceProcessor(handler)}
  return self19
}


// HELPER FUNCTIONS AND STRUCTURES


