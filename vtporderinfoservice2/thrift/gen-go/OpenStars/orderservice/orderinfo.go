// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package orderservice

import(
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TErrorCode int64
const (
  TErrorCode_EGood TErrorCode = 0
  TErrorCode_ENotFound TErrorCode = -1
  TErrorCode_EUnknown TErrorCode = -2
  TErrorCode_EDataExisted TErrorCode = -3
)

func (p TErrorCode) String() string {
  switch p {
  case TErrorCode_EGood: return "EGood"
  case TErrorCode_ENotFound: return "ENotFound"
  case TErrorCode_EUnknown: return "EUnknown"
  case TErrorCode_EDataExisted: return "EDataExisted"
  }
  return "<UNSET>"
}

func TErrorCodeFromString(s string) (TErrorCode, error) {
  switch s {
  case "EGood": return TErrorCode_EGood, nil 
  case "ENotFound": return TErrorCode_ENotFound, nil 
  case "EUnknown": return TErrorCode_EUnknown, nil 
  case "EDataExisted": return TErrorCode_EDataExisted, nil 
  }
  return TErrorCode(0), fmt.Errorf("not a valid TErrorCode string")
}


func TErrorCodePtr(v TErrorCode) *TErrorCode { return &v }

func (p TErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TErrorCode) UnmarshalText(text []byte) error {
q, err := TErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TErrorCode(v)
return nil
}

func (p * TErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TKey string

func TKeyPtr(v TKey) *TKey { return &v }

type TData *TOrder

func TDataPtr(v TData) *TData { return &v }

// Attributes:
//  - OrderLadingcode
//  - OrderCreatedate
//  - OrderSendname
//  - OrderSendaddress
//  - OrderSendtel
//  - OrderSendprovince
//  - OrderDescription
//  - OrderNote
//  - NgayGiao
//  - Buucucgo
//  - BuuTa
//  - TrangThai
//  - IDNhan
//  - MotaSp
//  - MaDvViettel
//  - TrongLuong
//  - TienHang
//  - TienThuHo
//  - OrderReference
//  - DvCongThem
//  - Thoigian
//  - MaBuucuc
//  - DieuHanh
//  - OrderSendward
//  - OrderSenddistrict
type TOrder struct {
  OrderLadingcode TKey `thrift:"order_ladingcode,1" db:"order_ladingcode" json:"order_ladingcode"`
  OrderCreatedate int64 `thrift:"order_createdate,2" db:"order_createdate" json:"order_createdate"`
  OrderSendname string `thrift:"order_sendname,3" db:"order_sendname" json:"order_sendname"`
  OrderSendaddress string `thrift:"order_sendaddress,4" db:"order_sendaddress" json:"order_sendaddress"`
  OrderSendtel string `thrift:"order_sendtel,5" db:"order_sendtel" json:"order_sendtel"`
  OrderSendprovince string `thrift:"order_sendprovince,6" db:"order_sendprovince" json:"order_sendprovince"`
  OrderDescription string `thrift:"order_description,7" db:"order_description" json:"order_description"`
  OrderNote string `thrift:"order_note,8" db:"order_note" json:"order_note"`
  NgayGiao int64 `thrift:"ngay_giao,9" db:"ngay_giao" json:"ngay_giao"`
  Buucucgo string `thrift:"buucucgo,10" db:"buucucgo" json:"buucucgo"`
  BuuTa int64 `thrift:"buu_ta,11" db:"buu_ta" json:"buu_ta"`
  TrangThai int64 `thrift:"trang_thai,12" db:"trang_thai" json:"trang_thai"`
  IDNhan int64 `thrift:"id_nhan,13" db:"id_nhan" json:"id_nhan"`
  MotaSp string `thrift:"mota_sp,14" db:"mota_sp" json:"mota_sp"`
  MaDvViettel string `thrift:"ma_dv_viettel,15" db:"ma_dv_viettel" json:"ma_dv_viettel"`
  TrongLuong int64 `thrift:"trong_luong,16" db:"trong_luong" json:"trong_luong"`
  TienHang int64 `thrift:"tien_hang,17" db:"tien_hang" json:"tien_hang"`
  TienThuHo int64 `thrift:"tien_thu_ho,18" db:"tien_thu_ho" json:"tien_thu_ho"`
  OrderReference string `thrift:"order_reference,19" db:"order_reference" json:"order_reference"`
  DvCongThem string `thrift:"dv_cong_them,20" db:"dv_cong_them" json:"dv_cong_them"`
  Thoigian int64 `thrift:"thoigian,21" db:"thoigian" json:"thoigian"`
  MaBuucuc string `thrift:"ma_buucuc,22" db:"ma_buucuc" json:"ma_buucuc"`
  DieuHanh int64 `thrift:"dieu_hanh,23" db:"dieu_hanh" json:"dieu_hanh"`
  OrderSendward string `thrift:"order_sendward,24" db:"order_sendward" json:"order_sendward"`
  OrderSenddistrict string `thrift:"order_senddistrict,25" db:"order_senddistrict" json:"order_senddistrict"`
}

func NewTOrder() *TOrder {
  return &TOrder{}
}


func (p *TOrder) GetOrderLadingcode() TKey {
  return p.OrderLadingcode
}

func (p *TOrder) GetOrderCreatedate() int64 {
  return p.OrderCreatedate
}

func (p *TOrder) GetOrderSendname() string {
  return p.OrderSendname
}

func (p *TOrder) GetOrderSendaddress() string {
  return p.OrderSendaddress
}

func (p *TOrder) GetOrderSendtel() string {
  return p.OrderSendtel
}

func (p *TOrder) GetOrderSendprovince() string {
  return p.OrderSendprovince
}

func (p *TOrder) GetOrderDescription() string {
  return p.OrderDescription
}

func (p *TOrder) GetOrderNote() string {
  return p.OrderNote
}

func (p *TOrder) GetNgayGiao() int64 {
  return p.NgayGiao
}

func (p *TOrder) GetBuucucgo() string {
  return p.Buucucgo
}

func (p *TOrder) GetBuuTa() int64 {
  return p.BuuTa
}

func (p *TOrder) GetTrangThai() int64 {
  return p.TrangThai
}

func (p *TOrder) GetIDNhan() int64 {
  return p.IDNhan
}

func (p *TOrder) GetMotaSp() string {
  return p.MotaSp
}

func (p *TOrder) GetMaDvViettel() string {
  return p.MaDvViettel
}

func (p *TOrder) GetTrongLuong() int64 {
  return p.TrongLuong
}

func (p *TOrder) GetTienHang() int64 {
  return p.TienHang
}

func (p *TOrder) GetTienThuHo() int64 {
  return p.TienThuHo
}

func (p *TOrder) GetOrderReference() string {
  return p.OrderReference
}

func (p *TOrder) GetDvCongThem() string {
  return p.DvCongThem
}

func (p *TOrder) GetThoigian() int64 {
  return p.Thoigian
}

func (p *TOrder) GetMaBuucuc() string {
  return p.MaBuucuc
}

func (p *TOrder) GetDieuHanh() int64 {
  return p.DieuHanh
}

func (p *TOrder) GetOrderSendward() string {
  return p.OrderSendward
}

func (p *TOrder) GetOrderSenddistrict() string {
  return p.OrderSenddistrict
}
func (p *TOrder) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField25(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TOrder)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.OrderLadingcode = temp
}
  return nil
}

func (p *TOrder)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OrderCreatedate = v
}
  return nil
}

func (p *TOrder)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OrderSendname = v
}
  return nil
}

func (p *TOrder)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OrderSendaddress = v
}
  return nil
}

func (p *TOrder)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.OrderSendtel = v
}
  return nil
}

func (p *TOrder)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.OrderSendprovince = v
}
  return nil
}

func (p *TOrder)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.OrderDescription = v
}
  return nil
}

func (p *TOrder)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.OrderNote = v
}
  return nil
}

func (p *TOrder)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.NgayGiao = v
}
  return nil
}

func (p *TOrder)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Buucucgo = v
}
  return nil
}

func (p *TOrder)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.BuuTa = v
}
  return nil
}

func (p *TOrder)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.TrangThai = v
}
  return nil
}

func (p *TOrder)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.IDNhan = v
}
  return nil
}

func (p *TOrder)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.MotaSp = v
}
  return nil
}

func (p *TOrder)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.MaDvViettel = v
}
  return nil
}

func (p *TOrder)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.TrongLuong = v
}
  return nil
}

func (p *TOrder)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.TienHang = v
}
  return nil
}

func (p *TOrder)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.TienThuHo = v
}
  return nil
}

func (p *TOrder)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.OrderReference = v
}
  return nil
}

func (p *TOrder)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.DvCongThem = v
}
  return nil
}

func (p *TOrder)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.Thoigian = v
}
  return nil
}

func (p *TOrder)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.MaBuucuc = v
}
  return nil
}

func (p *TOrder)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.DieuHanh = v
}
  return nil
}

func (p *TOrder)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.OrderSendward = v
}
  return nil
}

func (p *TOrder)  ReadField25(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.OrderSenddistrict = v
}
  return nil
}

func (p *TOrder) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TOrder"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TOrder) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_ladingcode", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:order_ladingcode: ", p), err) }
  if err := oprot.WriteString(string(p.OrderLadingcode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_ladingcode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:order_ladingcode: ", p), err) }
  return err
}

func (p *TOrder) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_createdate", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:order_createdate: ", p), err) }
  if err := oprot.WriteI64(int64(p.OrderCreatedate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_createdate (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:order_createdate: ", p), err) }
  return err
}

func (p *TOrder) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_sendname", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:order_sendname: ", p), err) }
  if err := oprot.WriteString(string(p.OrderSendname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_sendname (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:order_sendname: ", p), err) }
  return err
}

func (p *TOrder) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_sendaddress", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:order_sendaddress: ", p), err) }
  if err := oprot.WriteString(string(p.OrderSendaddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_sendaddress (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:order_sendaddress: ", p), err) }
  return err
}

func (p *TOrder) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_sendtel", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:order_sendtel: ", p), err) }
  if err := oprot.WriteString(string(p.OrderSendtel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_sendtel (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:order_sendtel: ", p), err) }
  return err
}

func (p *TOrder) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_sendprovince", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:order_sendprovince: ", p), err) }
  if err := oprot.WriteString(string(p.OrderSendprovince)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_sendprovince (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:order_sendprovince: ", p), err) }
  return err
}

func (p *TOrder) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_description", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:order_description: ", p), err) }
  if err := oprot.WriteString(string(p.OrderDescription)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_description (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:order_description: ", p), err) }
  return err
}

func (p *TOrder) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_note", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:order_note: ", p), err) }
  if err := oprot.WriteString(string(p.OrderNote)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_note (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:order_note: ", p), err) }
  return err
}

func (p *TOrder) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ngay_giao", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:ngay_giao: ", p), err) }
  if err := oprot.WriteI64(int64(p.NgayGiao)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ngay_giao (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:ngay_giao: ", p), err) }
  return err
}

func (p *TOrder) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("buucucgo", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:buucucgo: ", p), err) }
  if err := oprot.WriteString(string(p.Buucucgo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.buucucgo (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:buucucgo: ", p), err) }
  return err
}

func (p *TOrder) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("buu_ta", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:buu_ta: ", p), err) }
  if err := oprot.WriteI64(int64(p.BuuTa)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.buu_ta (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:buu_ta: ", p), err) }
  return err
}

func (p *TOrder) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trang_thai", thrift.I64, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:trang_thai: ", p), err) }
  if err := oprot.WriteI64(int64(p.TrangThai)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trang_thai (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:trang_thai: ", p), err) }
  return err
}

func (p *TOrder) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id_nhan", thrift.I64, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:id_nhan: ", p), err) }
  if err := oprot.WriteI64(int64(p.IDNhan)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id_nhan (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:id_nhan: ", p), err) }
  return err
}

func (p *TOrder) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mota_sp", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:mota_sp: ", p), err) }
  if err := oprot.WriteString(string(p.MotaSp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mota_sp (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:mota_sp: ", p), err) }
  return err
}

func (p *TOrder) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ma_dv_viettel", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:ma_dv_viettel: ", p), err) }
  if err := oprot.WriteString(string(p.MaDvViettel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ma_dv_viettel (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:ma_dv_viettel: ", p), err) }
  return err
}

func (p *TOrder) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trong_luong", thrift.I64, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:trong_luong: ", p), err) }
  if err := oprot.WriteI64(int64(p.TrongLuong)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trong_luong (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:trong_luong: ", p), err) }
  return err
}

func (p *TOrder) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tien_hang", thrift.I64, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:tien_hang: ", p), err) }
  if err := oprot.WriteI64(int64(p.TienHang)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tien_hang (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:tien_hang: ", p), err) }
  return err
}

func (p *TOrder) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tien_thu_ho", thrift.I64, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:tien_thu_ho: ", p), err) }
  if err := oprot.WriteI64(int64(p.TienThuHo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tien_thu_ho (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:tien_thu_ho: ", p), err) }
  return err
}

func (p *TOrder) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_reference", thrift.STRING, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:order_reference: ", p), err) }
  if err := oprot.WriteString(string(p.OrderReference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_reference (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:order_reference: ", p), err) }
  return err
}

func (p *TOrder) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dv_cong_them", thrift.STRING, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:dv_cong_them: ", p), err) }
  if err := oprot.WriteString(string(p.DvCongThem)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dv_cong_them (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:dv_cong_them: ", p), err) }
  return err
}

func (p *TOrder) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("thoigian", thrift.I64, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:thoigian: ", p), err) }
  if err := oprot.WriteI64(int64(p.Thoigian)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thoigian (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:thoigian: ", p), err) }
  return err
}

func (p *TOrder) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ma_buucuc", thrift.STRING, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:ma_buucuc: ", p), err) }
  if err := oprot.WriteString(string(p.MaBuucuc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ma_buucuc (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:ma_buucuc: ", p), err) }
  return err
}

func (p *TOrder) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dieu_hanh", thrift.I64, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:dieu_hanh: ", p), err) }
  if err := oprot.WriteI64(int64(p.DieuHanh)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dieu_hanh (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:dieu_hanh: ", p), err) }
  return err
}

func (p *TOrder) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_sendward", thrift.STRING, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:order_sendward: ", p), err) }
  if err := oprot.WriteString(string(p.OrderSendward)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_sendward (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:order_sendward: ", p), err) }
  return err
}

func (p *TOrder) writeField25(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_senddistrict", thrift.STRING, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:order_senddistrict: ", p), err) }
  if err := oprot.WriteString(string(p.OrderSenddistrict)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_senddistrict (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:order_senddistrict: ", p), err) }
  return err
}

func (p *TOrder) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TOrder(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - Data
type TDataResult_ struct {
  ErrorCode TErrorCode `thrift:"errorCode,1" db:"errorCode" json:"errorCode"`
  Data *TOrder `thrift:"data,2" db:"data" json:"data,omitempty"`
}

func NewTDataResult_() *TDataResult_ {
  return &TDataResult_{}
}


func (p *TDataResult_) GetErrorCode() TErrorCode {
  return p.ErrorCode
}
var TDataResult__Data_DEFAULT *TOrder
func (p *TDataResult_) GetData() *TOrder {
  if !p.IsSetData() {
    return TDataResult__Data_DEFAULT
  }
return p.Data
}
func (p *TDataResult_) IsSetData() bool {
  return p.Data != nil
}

func (p *TDataResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *TDataResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.Data = &TOrder{}
  if err := p.Data.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *TDataResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDataResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err) }
  return err
}

func (p *TDataResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
    if err := p.Data.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  }
  return err
}

func (p *TDataResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataResult_(%+v)", *p)
}

type TDataServiceR interface {
  // Parameters:
  //  - Key
  GetData(ctx context.Context, key TKey) (r *TDataResult_, err error)
}

type TDataServiceRClient struct {
  c thrift.TClient
}

func NewTDataServiceRClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TDataServiceRClient {
  return &TDataServiceRClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTDataServiceRClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TDataServiceRClient {
  return &TDataServiceRClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTDataServiceRClient(c thrift.TClient) *TDataServiceRClient {
  return &TDataServiceRClient{
    c: c,
  }
}

func (p *TDataServiceRClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Key
func (p *TDataServiceRClient) GetData(ctx context.Context, key TKey) (r *TDataResult_, err error) {
  var _args0 TDataServiceRGetDataArgs
  _args0.Key = key
  var _result1 TDataServiceRGetDataResult
  if err = p.Client_().Call(ctx, "getData", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

type TDataServiceRProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TDataServiceR
}

func (p *TDataServiceRProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TDataServiceRProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TDataServiceRProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTDataServiceRProcessor(handler TDataServiceR) *TDataServiceRProcessor {

  self2 := &TDataServiceRProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self2.processorMap["getData"] = &tDataServiceRProcessorGetData{handler:handler}
return self2
}

func (p *TDataServiceRProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x3.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x3

}

type tDataServiceRProcessorGetData struct {
  handler TDataServiceR
}

func (p *tDataServiceRProcessorGetData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDataServiceRGetDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDataServiceRGetDataResult{}
var retval *TDataResult_
  var err2 error
  if retval, err2 = p.handler.GetData(ctx, args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getData: " + err2.Error())
    oprot.WriteMessageBegin("getData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Key
type TDataServiceRGetDataArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
}

func NewTDataServiceRGetDataArgs() *TDataServiceRGetDataArgs {
  return &TDataServiceRGetDataArgs{}
}


func (p *TDataServiceRGetDataArgs) GetKey() TKey {
  return p.Key
}
func (p *TDataServiceRGetDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceRGetDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *TDataServiceRGetDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceRGetDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TDataServiceRGetDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceRGetDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDataServiceRGetDataResult struct {
  Success *TDataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDataServiceRGetDataResult() *TDataServiceRGetDataResult {
  return &TDataServiceRGetDataResult{}
}

var TDataServiceRGetDataResult_Success_DEFAULT *TDataResult_
func (p *TDataServiceRGetDataResult) GetSuccess() *TDataResult_ {
  if !p.IsSetSuccess() {
    return TDataServiceRGetDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *TDataServiceRGetDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDataServiceRGetDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceRGetDataResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDataResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TDataServiceRGetDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceRGetDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDataServiceRGetDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceRGetDataResult(%+v)", *p)
}


type TDataService interface {
  // Parameters:
  //  - Key
  GetData(ctx context.Context, key TKey) (r *TDataResult_, err error)
  // Parameters:
  //  - Keys
  GetMultiData(ctx context.Context, keys []TKey) (r map[TKey]*TOrder, err error)
  // Parameters:
  //  - Key
  //  - Data
  PutData(ctx context.Context, key TKey, data *TOrder) (r TErrorCode, err error)
}

type TDataServiceClient struct {
  c thrift.TClient
}

func NewTDataServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TDataServiceClient {
  return &TDataServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTDataServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TDataServiceClient {
  return &TDataServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTDataServiceClient(c thrift.TClient) *TDataServiceClient {
  return &TDataServiceClient{
    c: c,
  }
}

func (p *TDataServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Key
func (p *TDataServiceClient) GetData(ctx context.Context, key TKey) (r *TDataResult_, err error) {
  var _args5 TDataServiceGetDataArgs
  _args5.Key = key
  var _result6 TDataServiceGetDataResult
  if err = p.Client_().Call(ctx, "getData", &_args5, &_result6); err != nil {
    return
  }
  return _result6.GetSuccess(), nil
}

// Parameters:
//  - Keys
func (p *TDataServiceClient) GetMultiData(ctx context.Context, keys []TKey) (r map[TKey]*TOrder, err error) {
  var _args7 TDataServiceGetMultiDataArgs
  _args7.Keys = keys
  var _result8 TDataServiceGetMultiDataResult
  if err = p.Client_().Call(ctx, "getMultiData", &_args7, &_result8); err != nil {
    return
  }
  return _result8.GetSuccess(), nil
}

// Parameters:
//  - Key
//  - Data
func (p *TDataServiceClient) PutData(ctx context.Context, key TKey, data *TOrder) (r TErrorCode, err error) {
  var _args9 TDataServicePutDataArgs
  _args9.Key = key
  _args9.Data = data
  var _result10 TDataServicePutDataResult
  if err = p.Client_().Call(ctx, "putData", &_args9, &_result10); err != nil {
    return
  }
  return _result10.GetSuccess(), nil
}

type TDataServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TDataService
}

func (p *TDataServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TDataServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TDataServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTDataServiceProcessor(handler TDataService) *TDataServiceProcessor {

  self11 := &TDataServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self11.processorMap["getData"] = &tDataServiceProcessorGetData{handler:handler}
  self11.processorMap["getMultiData"] = &tDataServiceProcessorGetMultiData{handler:handler}
  self11.processorMap["putData"] = &tDataServiceProcessorPutData{handler:handler}
return self11
}

func (p *TDataServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x12 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x12.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x12

}

type tDataServiceProcessorGetData struct {
  handler TDataService
}

func (p *tDataServiceProcessorGetData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDataServiceGetDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDataServiceGetDataResult{}
var retval *TDataResult_
  var err2 error
  if retval, err2 = p.handler.GetData(ctx, args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getData: " + err2.Error())
    oprot.WriteMessageBegin("getData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDataServiceProcessorGetMultiData struct {
  handler TDataService
}

func (p *tDataServiceProcessorGetMultiData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDataServiceGetMultiDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getMultiData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDataServiceGetMultiDataResult{}
var retval map[TKey]*TOrder
  var err2 error
  if retval, err2 = p.handler.GetMultiData(ctx, args.Keys); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMultiData: " + err2.Error())
    oprot.WriteMessageBegin("getMultiData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getMultiData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDataServiceProcessorPutData struct {
  handler TDataService
}

func (p *tDataServiceProcessorPutData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDataServicePutDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("putData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDataServicePutDataResult{}
var retval TErrorCode
  var err2 error
  if retval, err2 = p.handler.PutData(ctx, args.Key, args.Data); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putData: " + err2.Error())
    oprot.WriteMessageBegin("putData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("putData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Key
type TDataServiceGetDataArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
}

func NewTDataServiceGetDataArgs() *TDataServiceGetDataArgs {
  return &TDataServiceGetDataArgs{}
}


func (p *TDataServiceGetDataArgs) GetKey() TKey {
  return p.Key
}
func (p *TDataServiceGetDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceGetDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *TDataServiceGetDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceGetDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TDataServiceGetDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceGetDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDataServiceGetDataResult struct {
  Success *TDataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDataServiceGetDataResult() *TDataServiceGetDataResult {
  return &TDataServiceGetDataResult{}
}

var TDataServiceGetDataResult_Success_DEFAULT *TDataResult_
func (p *TDataServiceGetDataResult) GetSuccess() *TDataResult_ {
  if !p.IsSetSuccess() {
    return TDataServiceGetDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *TDataServiceGetDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDataServiceGetDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceGetDataResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDataResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TDataServiceGetDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceGetDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDataServiceGetDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceGetDataResult(%+v)", *p)
}

// Attributes:
//  - Keys
type TDataServiceGetMultiDataArgs struct {
  Keys []TKey `thrift:"keys,1" db:"keys" json:"keys"`
}

func NewTDataServiceGetMultiDataArgs() *TDataServiceGetMultiDataArgs {
  return &TDataServiceGetMultiDataArgs{}
}


func (p *TDataServiceGetMultiDataArgs) GetKeys() []TKey {
  return p.Keys
}
func (p *TDataServiceGetMultiDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceGetMultiDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]TKey, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem13 TKey
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := TKey(v)
    _elem13 = temp
}
    p.Keys = append(p.Keys, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDataServiceGetMultiDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMultiData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceGetMultiDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keys", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keys: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keys: ", p), err) }
  return err
}

func (p *TDataServiceGetMultiDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceGetMultiDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDataServiceGetMultiDataResult struct {
  Success map[TKey]*TOrder `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDataServiceGetMultiDataResult() *TDataServiceGetMultiDataResult {
  return &TDataServiceGetMultiDataResult{}
}

var TDataServiceGetMultiDataResult_Success_DEFAULT map[TKey]*TOrder

func (p *TDataServiceGetMultiDataResult) GetSuccess() map[TKey]*TOrder {
  return p.Success
}
func (p *TDataServiceGetMultiDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDataServiceGetMultiDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceGetMultiDataResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[TKey]*TOrder, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key14 TKey
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := TKey(v)
    _key14 = temp
}
    _val15 := &TOrder{}
    if err := _val15.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val15), err)
    }
    p.Success[_key14] = _val15
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TDataServiceGetMultiDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMultiData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceGetMultiDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDataServiceGetMultiDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceGetMultiDataResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Data
type TDataServicePutDataArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
  Data *TOrder `thrift:"data,2" db:"data" json:"data"`
}

func NewTDataServicePutDataArgs() *TDataServicePutDataArgs {
  return &TDataServicePutDataArgs{}
}


func (p *TDataServicePutDataArgs) GetKey() TKey {
  return p.Key
}
var TDataServicePutDataArgs_Data_DEFAULT *TOrder
func (p *TDataServicePutDataArgs) GetData() *TOrder {
  if !p.IsSetData() {
    return TDataServicePutDataArgs_Data_DEFAULT
  }
return p.Data
}
func (p *TDataServicePutDataArgs) IsSetData() bool {
  return p.Data != nil
}

func (p *TDataServicePutDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServicePutDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *TDataServicePutDataArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Data = &TOrder{}
  if err := p.Data.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *TDataServicePutDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServicePutDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TDataServicePutDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := p.Data.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *TDataServicePutDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServicePutDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDataServicePutDataResult struct {
  Success *TErrorCode `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDataServicePutDataResult() *TDataServicePutDataResult {
  return &TDataServicePutDataResult{}
}

var TDataServicePutDataResult_Success_DEFAULT TErrorCode
func (p *TDataServicePutDataResult) GetSuccess() TErrorCode {
  if !p.IsSetSuccess() {
    return TDataServicePutDataResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TDataServicePutDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDataServicePutDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServicePutDataResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := TErrorCode(v)
  p.Success = &temp
}
  return nil
}

func (p *TDataServicePutDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServicePutDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDataServicePutDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServicePutDataResult(%+v)", *p)
}


type TOrderService interface {
TDataService
}

type TOrderServiceClient struct {
  *TDataServiceClient
}

func NewTOrderServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TOrderServiceClient {
  return &TOrderServiceClient{TDataServiceClient: NewTDataServiceClientFactory(t, f)}}

func NewTOrderServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TOrderServiceClient {
  return &TOrderServiceClient{TDataServiceClient: NewTDataServiceClientProtocol(t, iprot, oprot)}
}

func NewTOrderServiceClient(c thrift.TClient) *TOrderServiceClient {
  return &TOrderServiceClient{
    TDataServiceClient: NewTDataServiceClient(c),
  }
}

type TOrderServiceProcessor struct {
  *TDataServiceProcessor
}

func NewTOrderServiceProcessor(handler TOrderService) *TOrderServiceProcessor {
  self30 := &TOrderServiceProcessor{NewTDataServiceProcessor(handler)}
  return self30
}


// HELPER FUNCTIONS AND STRUCTURES


