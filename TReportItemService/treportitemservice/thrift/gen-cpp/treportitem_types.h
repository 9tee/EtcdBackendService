/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef treportitem_TYPES_H
#define treportitem_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace OpenStars { namespace Platform { namespace MarketPlace {

struct TErrorCode {
  enum type {
    EGood = 0,
    ENotFound = -1,
    EUnknown = -2,
    EDataExisted = -3
  };
};

extern const std::map<int, const char*> _TErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TErrorCode::type& val);

typedef int64_t TKey;

typedef class TReportItem TData;

class TReportItem;

class TListDataResult;

class TDataResult;

typedef struct _TReportItem__isset {
  _TReportItem__isset() : ID(false), title(false), content(false), reportType(false), uid(false), timestamps(false), isDelete(false), mapExtend(false) {}
  bool ID :1;
  bool title :1;
  bool content :1;
  bool reportType :1;
  bool uid :1;
  bool timestamps :1;
  bool isDelete :1;
  bool mapExtend :1;
} _TReportItem__isset;

class TReportItem : public virtual ::apache::thrift::TBase {
 public:

  TReportItem(const TReportItem&);
  TReportItem& operator=(const TReportItem&);
  TReportItem() : ID(0), title(), content(), reportType(0), uid(0), timestamps(0), isDelete(0) {
  }

  virtual ~TReportItem() throw();
  int64_t ID;
  std::string title;
  std::string content;
  int64_t reportType;
  int64_t uid;
  int64_t timestamps;
  bool isDelete;
  std::map<std::string, std::string>  mapExtend;

  _TReportItem__isset __isset;

  void __set_ID(const int64_t val);

  void __set_title(const std::string& val);

  void __set_content(const std::string& val);

  void __set_reportType(const int64_t val);

  void __set_uid(const int64_t val);

  void __set_timestamps(const int64_t val);

  void __set_isDelete(const bool val);

  void __set_mapExtend(const std::map<std::string, std::string> & val);

  bool operator == (const TReportItem & rhs) const
  {
    if (!(ID == rhs.ID))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(reportType == rhs.reportType))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(timestamps == rhs.timestamps))
      return false;
    if (!(isDelete == rhs.isDelete))
      return false;
    if (!(mapExtend == rhs.mapExtend))
      return false;
    return true;
  }
  bool operator != (const TReportItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TReportItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TReportItem &a, TReportItem &b);

std::ostream& operator<<(std::ostream& out, const TReportItem& obj);

typedef struct _TListDataResult__isset {
  _TListDataResult__isset() : errorCode(false), data(false) {}
  bool errorCode :1;
  bool data :1;
} _TListDataResult__isset;

class TListDataResult : public virtual ::apache::thrift::TBase {
 public:

  TListDataResult(const TListDataResult&);
  TListDataResult& operator=(const TListDataResult&);
  TListDataResult() : errorCode((TErrorCode::type)0) {
  }

  virtual ~TListDataResult() throw();
  TErrorCode::type errorCode;
  std::vector<TReportItem>  data;

  _TListDataResult__isset __isset;

  void __set_errorCode(const TErrorCode::type val);

  void __set_data(const std::vector<TReportItem> & val);

  bool operator == (const TListDataResult & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const TListDataResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TListDataResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TListDataResult &a, TListDataResult &b);

std::ostream& operator<<(std::ostream& out, const TListDataResult& obj);

typedef struct _TDataResult__isset {
  _TDataResult__isset() : errorCode(false), data(false) {}
  bool errorCode :1;
  bool data :1;
} _TDataResult__isset;

class TDataResult : public virtual ::apache::thrift::TBase {
 public:

  TDataResult(const TDataResult&);
  TDataResult& operator=(const TDataResult&);
  TDataResult() : errorCode((TErrorCode::type)0) {
  }

  virtual ~TDataResult() throw();
  TErrorCode::type errorCode;
  TReportItem data;

  _TDataResult__isset __isset;

  void __set_errorCode(const TErrorCode::type val);

  void __set_data(const TReportItem& val);

  bool operator == (const TDataResult & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const TDataResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDataResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDataResult &a, TDataResult &b);

std::ostream& operator<<(std::ostream& out, const TDataResult& obj);

}}} // namespace

#endif
