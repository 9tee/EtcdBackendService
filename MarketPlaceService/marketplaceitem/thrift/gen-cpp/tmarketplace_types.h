/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef tmarketplace_TYPES_H
#define tmarketplace_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace OpenStars { namespace Platform { namespace MarketPlace {

struct TErrorCode {
  enum type {
    EGood = 0,
    ENotFound = -1,
    EUnknown = -2,
    EDataExisted = -3
  };
};

extern const std::map<int, const char*> _TErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TErrorCode::type& val);

std::string to_string(const TErrorCode::type& val);

typedef int64_t TKey;

typedef class TMarketPlaceItem TData;

class TMediaItem;

class TMarketPlaceItem;

class TDataResult;

class TListDataResult;

typedef struct _TMediaItem__isset {
  _TMediaItem__isset() : imgurl(false), name(false), mediaType(false), extend(false) {}
  bool imgurl :1;
  bool name :1;
  bool mediaType :1;
  bool extend :1;
} _TMediaItem__isset;

class TMediaItem : public virtual ::apache::thrift::TBase {
 public:

  TMediaItem(const TMediaItem&);
  TMediaItem& operator=(const TMediaItem&);
  TMediaItem() : imgurl(), name(), mediaType(0) {
  }

  virtual ~TMediaItem() noexcept;
  std::string imgurl;
  std::string name;
  int64_t mediaType;
  std::map<std::string, std::string>  extend;

  _TMediaItem__isset __isset;

  void __set_imgurl(const std::string& val);

  void __set_name(const std::string& val);

  void __set_mediaType(const int64_t val);

  void __set_extend(const std::map<std::string, std::string> & val);

  bool operator == (const TMediaItem & rhs) const
  {
    if (!(imgurl == rhs.imgurl))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(mediaType == rhs.mediaType))
      return false;
    if (!(extend == rhs.extend))
      return false;
    return true;
  }
  bool operator != (const TMediaItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMediaItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TMediaItem &a, TMediaItem &b);

std::ostream& operator<<(std::ostream& out, const TMediaItem& obj);

typedef struct _TMarketPlaceItem__isset {
  _TMarketPlaceItem__isset() : ID(false), title(false), price(false), listMediaItems(false), category(false), subfeatures(false), descriptions(false), uid(false), count(false), isdelivery(false), tags(false), timestamps(false), location(false) {}
  bool ID :1;
  bool title :1;
  bool price :1;
  bool listMediaItems :1;
  bool category :1;
  bool subfeatures :1;
  bool descriptions :1;
  bool uid :1;
  bool count :1;
  bool isdelivery :1;
  bool tags :1;
  bool timestamps :1;
  bool location :1;
} _TMarketPlaceItem__isset;

class TMarketPlaceItem : public virtual ::apache::thrift::TBase {
 public:

  TMarketPlaceItem(const TMarketPlaceItem&);
  TMarketPlaceItem& operator=(const TMarketPlaceItem&);
  TMarketPlaceItem() : ID(0), title(), price(0), category(0), descriptions(), uid(0), count(0), isdelivery(0), timestamps(0), location() {
  }

  virtual ~TMarketPlaceItem() noexcept;
  int64_t ID;
  std::string title;
  int64_t price;
  std::vector<TMediaItem>  listMediaItems;
  int64_t category;
  std::map<std::string, std::string>  subfeatures;
  std::string descriptions;
  int64_t uid;
  int64_t count;
  bool isdelivery;
  std::vector<std::string>  tags;
  int64_t timestamps;
  std::string location;

  _TMarketPlaceItem__isset __isset;

  void __set_ID(const int64_t val);

  void __set_title(const std::string& val);

  void __set_price(const int64_t val);

  void __set_listMediaItems(const std::vector<TMediaItem> & val);

  void __set_category(const int64_t val);

  void __set_subfeatures(const std::map<std::string, std::string> & val);

  void __set_descriptions(const std::string& val);

  void __set_uid(const int64_t val);

  void __set_count(const int64_t val);

  void __set_isdelivery(const bool val);

  void __set_tags(const std::vector<std::string> & val);

  void __set_timestamps(const int64_t val);

  void __set_location(const std::string& val);

  bool operator == (const TMarketPlaceItem & rhs) const
  {
    if (!(ID == rhs.ID))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(listMediaItems == rhs.listMediaItems))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(subfeatures == rhs.subfeatures))
      return false;
    if (!(descriptions == rhs.descriptions))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(isdelivery == rhs.isdelivery))
      return false;
    if (!(tags == rhs.tags))
      return false;
    if (!(timestamps == rhs.timestamps))
      return false;
    if (!(location == rhs.location))
      return false;
    return true;
  }
  bool operator != (const TMarketPlaceItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMarketPlaceItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TMarketPlaceItem &a, TMarketPlaceItem &b);

std::ostream& operator<<(std::ostream& out, const TMarketPlaceItem& obj);

typedef struct _TDataResult__isset {
  _TDataResult__isset() : errorCode(false), data(false) {}
  bool errorCode :1;
  bool data :1;
} _TDataResult__isset;

class TDataResult : public virtual ::apache::thrift::TBase {
 public:

  TDataResult(const TDataResult&);
  TDataResult& operator=(const TDataResult&);
  TDataResult() : errorCode((TErrorCode::type)0) {
  }

  virtual ~TDataResult() noexcept;
  TErrorCode::type errorCode;
  TMarketPlaceItem data;

  _TDataResult__isset __isset;

  void __set_errorCode(const TErrorCode::type val);

  void __set_data(const TMarketPlaceItem& val);

  bool operator == (const TDataResult & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const TDataResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDataResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDataResult &a, TDataResult &b);

std::ostream& operator<<(std::ostream& out, const TDataResult& obj);

typedef struct _TListDataResult__isset {
  _TListDataResult__isset() : errorCode(false), data(false) {}
  bool errorCode :1;
  bool data :1;
} _TListDataResult__isset;

class TListDataResult : public virtual ::apache::thrift::TBase {
 public:

  TListDataResult(const TListDataResult&);
  TListDataResult& operator=(const TListDataResult&);
  TListDataResult() : errorCode((TErrorCode::type)0) {
  }

  virtual ~TListDataResult() noexcept;
  TErrorCode::type errorCode;
  std::vector<TMarketPlaceItem>  data;

  _TListDataResult__isset __isset;

  void __set_errorCode(const TErrorCode::type val);

  void __set_data(const std::vector<TMarketPlaceItem> & val);

  bool operator == (const TListDataResult & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const TListDataResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TListDataResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TListDataResult &a, TListDataResult &b);

std::ostream& operator<<(std::ostream& out, const TListDataResult& obj);

}}} // namespace

#endif
