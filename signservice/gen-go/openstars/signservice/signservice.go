// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package signservice

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Data
//  - Pubkey
//  - Sign
//  - ErrorMessage
type DataSignResult_ struct {
  Data string `thrift:"data,1" db:"data" json:"data"`
  Pubkey string `thrift:"pubkey,2" db:"pubkey" json:"pubkey"`
  Sign string `thrift:"sign,3" db:"sign" json:"sign"`
  ErrorMessage string `thrift:"errorMessage,4" db:"errorMessage" json:"errorMessage"`
}

func NewDataSignResult_() *DataSignResult_ {
  return &DataSignResult_{}
}


func (p *DataSignResult_) GetData() string {
  return p.Data
}

func (p *DataSignResult_) GetPubkey() string {
  return p.Pubkey
}

func (p *DataSignResult_) GetSign() string {
  return p.Sign
}

func (p *DataSignResult_) GetErrorMessage() string {
  return p.ErrorMessage
}
func (p *DataSignResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DataSignResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *DataSignResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Pubkey = v
}
  return nil
}

func (p *DataSignResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Sign = v
}
  return nil
}

func (p *DataSignResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ErrorMessage = v
}
  return nil
}

func (p *DataSignResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DataSignResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DataSignResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data: ", p), err) }
  if err := oprot.WriteString(string(p.Data)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data: ", p), err) }
  return err
}

func (p *DataSignResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pubkey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pubkey: ", p), err) }
  if err := oprot.WriteString(string(p.Pubkey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pubkey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pubkey: ", p), err) }
  return err
}

func (p *DataSignResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sign", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sign: ", p), err) }
  if err := oprot.WriteString(string(p.Sign)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sign (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sign: ", p), err) }
  return err
}

func (p *DataSignResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errorMessage", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:errorMessage: ", p), err) }
  if err := oprot.WriteString(string(p.ErrorMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorMessage (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:errorMessage: ", p), err) }
  return err
}

func (p *DataSignResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DataSignResult_(%+v)", *p)
}

type SignDataService interface {
  // Parameters:
  //  - PrivateKey
  //  - Data
  SignData(ctx context.Context, privateKey string, data string) (r *DataSignResult_, err error)
}

type SignDataServiceClient struct {
  c thrift.TClient
}

func NewSignDataServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SignDataServiceClient {
  return &SignDataServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewSignDataServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SignDataServiceClient {
  return &SignDataServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewSignDataServiceClient(c thrift.TClient) *SignDataServiceClient {
  return &SignDataServiceClient{
    c: c,
  }
}

func (p *SignDataServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - PrivateKey
//  - Data
func (p *SignDataServiceClient) SignData(ctx context.Context, privateKey string, data string) (r *DataSignResult_, err error) {
  var _args0 SignDataServiceSignDataArgs
  _args0.PrivateKey = privateKey
  _args0.Data = data
  var _result1 SignDataServiceSignDataResult
  if err = p.Client_().Call(ctx, "SignData", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

type SignDataServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler SignDataService
}

func (p *SignDataServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *SignDataServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *SignDataServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewSignDataServiceProcessor(handler SignDataService) *SignDataServiceProcessor {

  self2 := &SignDataServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self2.processorMap["SignData"] = &signDataServiceProcessorSignData{handler:handler}
return self2
}

func (p *SignDataServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x3.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x3

}

type signDataServiceProcessorSignData struct {
  handler SignDataService
}

func (p *signDataServiceProcessorSignData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SignDataServiceSignDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SignData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SignDataServiceSignDataResult{}
var retval *DataSignResult_
  var err2 error
  if retval, err2 = p.handler.SignData(ctx, args.PrivateKey, args.Data); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SignData: " + err2.Error())
    oprot.WriteMessageBegin("SignData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("SignData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - PrivateKey
//  - Data
type SignDataServiceSignDataArgs struct {
  PrivateKey string `thrift:"privateKey,1" db:"privateKey" json:"privateKey"`
  Data string `thrift:"data,2" db:"data" json:"data"`
}

func NewSignDataServiceSignDataArgs() *SignDataServiceSignDataArgs {
  return &SignDataServiceSignDataArgs{}
}


func (p *SignDataServiceSignDataArgs) GetPrivateKey() string {
  return p.PrivateKey
}

func (p *SignDataServiceSignDataArgs) GetData() string {
  return p.Data
}
func (p *SignDataServiceSignDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SignDataServiceSignDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PrivateKey = v
}
  return nil
}

func (p *SignDataServiceSignDataArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *SignDataServiceSignDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SignData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SignDataServiceSignDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privateKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:privateKey: ", p), err) }
  if err := oprot.WriteString(string(p.PrivateKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privateKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:privateKey: ", p), err) }
  return err
}

func (p *SignDataServiceSignDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := oprot.WriteString(string(p.Data)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *SignDataServiceSignDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SignDataServiceSignDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SignDataServiceSignDataResult struct {
  Success *DataSignResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSignDataServiceSignDataResult() *SignDataServiceSignDataResult {
  return &SignDataServiceSignDataResult{}
}

var SignDataServiceSignDataResult_Success_DEFAULT *DataSignResult_
func (p *SignDataServiceSignDataResult) GetSuccess() *DataSignResult_ {
  if !p.IsSetSuccess() {
    return SignDataServiceSignDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *SignDataServiceSignDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SignDataServiceSignDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SignDataServiceSignDataResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &DataSignResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SignDataServiceSignDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SignData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SignDataServiceSignDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SignDataServiceSignDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SignDataServiceSignDataResult(%+v)", *p)
}


